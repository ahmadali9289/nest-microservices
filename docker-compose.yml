version: '3.8'

services:
  admin:
    container_name: admin_api_${NODE_ENV}
    image: admin_api_${NODE_ENV}
    build:
      context: ./admin
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - 8000:3000
    depends_on:
      - postgres
    links:
      - postgres:postgres
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - nesjs-network

  postgres:
    container_name: postgres
    image: postgres:alpine
    networks:
      - nesjs-network
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB_PREFIX}_${POSTGRES_DB_NAME}
      - POSTGRES_HOST=${POSTGRES_DB_HOST}
      - PG_DATA=/var/lib/postgresql/data
    ports:
      - ${POSTGRES_DB_PORT}:${POSTGRES_DB_PORT}
    volumes:
      - ./pgdata:/var/lib/postgresql/data

  pgadmin:
    links:
      - postgres:postgres
    container_name: pgadmin
    image: dpage/pgadmin4
    volumes:
      - ./pgdata/pgadmin:/root/.pgadmin
    env_file:
      - .env
    networks:
      - nesjs-network
  
  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    volumes:
      - ./nginx/templates:/etc/nginx/templates
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    environment:
      - NGINX_PORT=${NGINX_PORT}
      - BACKEND_PORT=${BACKEND_PORT}
    ports:
      - 80:${NGINX_PORT}
    depends_on:
      - admin
      - postgres
    networks:
      - nesjs-network

networks:
  nesjs-network: